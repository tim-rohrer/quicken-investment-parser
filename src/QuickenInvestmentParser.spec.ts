import { ErrImpl, OkImpl } from "ts-results-es"

import { jest } from "@jest/globals"

import QuickenInvestmentParser, { CSVData } from "./QuickenInvestmentParser"

const quickenInvestmentFileContentsFixture: CSVData = [
  {
    Date: "3/31/2016",
    Type: "Buy",
    Action: "",
    Security: "FDIC INSURED ACCOUNT - IRA",
    Symbol: "QRETQ",
    Payee: "FDIC INSURED ACCOUNT - IRA",
    "Statement Payee": "",
    Category: "Investments:Buy",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "0.5",
    Shares: "0.5",
    "Cash Out": "0.50",
    "Cash In": "",
    "Invest Amt": "0.50",
    Amount: "-0.50",
    Account: "Emily's IRA",
    "Statement Memo": "",
    Reference: "",
  },
  {
    Date: "3/31/2016",
    Type: "Buy",
    Action: "",
    Security: "USAA Tax-Exempt Money Market Fund",
    Symbol: "USEXX",
    Payee: "USAA Tax-Exempt Money Market Fund",
    "Statement Payee": "",
    Category: "Investments:Buy",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "0.09",
    Shares: "0.09",
    "Cash Out": "0.09",
    "Cash In": "",
    "Invest Amt": "0.09",
    Amount: "-0.09",
    Account: "Joint Brokerage",
    "Statement Memo": "",
    Reference: "",
  },
  {
    Date: "3/31/2016",
    Type: "Dividend Income",
    Action: "",
    Security: "USAA Tax-Exempt Money Market Fund",
    Symbol: "USEXX",
    Payee: "USAA Tax-Exempt Money Market Fund",
    "Statement Payee": "",
    Category: "Investments:Dividend Income Tax-Free",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "",
    Shares: "",
    "Cash Out": "",
    "Cash In": "0.09",
    "Invest Amt": "",
    Amount: "0.09",
    Account: "Joint Brokerage",
    "Statement Memo": "",
    Reference: "",
  },
  {
    Date: "3/31/2016",
    Type: "Interest Income",
    Action: "",
    Security: "",
    Symbol: "",
    Payee: "",
    "Statement Payee": "",
    Category: "Investments:Interest Income",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "",
    Shares: "",
    "Cash Out": "",
    "Cash In": "0.89",
    "Invest Amt": "",
    Amount: "0.89",
    Account: "Tim's IRA",
    "Statement Memo": "FDIC INSURED ACCOUNT - IRA INTEREST RECEIVED",
    Reference: "",
  },
  {
    Date: "3/31/2016",
    Type: "Buy",
    Action: "",
    Security: "FDIC INSURED ACCOUNT - IRA",
    Symbol: "QRETQ",
    Payee: "FDIC INSURED ACCOUNT - IRA",
    "Statement Payee": "",
    Category: "Investments:Buy",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "0.89",
    Shares: "0.89",
    "Cash Out": "0.89",
    "Cash In": "",
    "Invest Amt": "0.89",
    Amount: "-0.89",
    Account: "Tim's IRA",
    "Statement Memo": "",
    Reference: "",
  },
  {
    Date: "4/29/2016",
    Type: "Interest Income",
    Action: "",
    Security: "",
    Symbol: "",
    Payee: "",
    "Statement Payee": "",
    Category: "Investments:Interest Income",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "",
    Shares: "",
    "Cash Out": "",
    "Cash In": "0.49",
    "Invest Amt": "",
    Amount: "0.49",
    Account: "Emily's IRA",
    "Statement Memo": "FDIC INSURED ACCOUNT - IRA INTEREST RECEIVED",
    Reference: "",
  },
  {
    Date: "4/29/2016",
    Type: "Buy",
    Action: "",
    Security: "FDIC INSURED ACCOUNT - IRA",
    Symbol: "QRETQ",
    Payee: "FDIC INSURED ACCOUNT - IRA",
    "Statement Payee": "",
    Category: "Investments:Buy",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "0.49",
    Shares: "0.49",
    "Cash Out": "0.49",
    "Cash In": "",
    "Invest Amt": "0.49",
    Amount: "-0.49",
    Account: "Emily's IRA",
    "Statement Memo": "",
    Reference: "",
  },
  {
    Date: "4/29/2016",
    Type: "Buy",
    Action: "",
    Security: "USAA Tax-Exempt Money Market Fund",
    Symbol: "USEXX",
    Payee: "USAA Tax-Exempt Money Market Fund",
    "Statement Payee": "",
    Category: "Investments:Buy",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "0.09",
    Shares: "0.09",
    "Cash Out": "0.09",
    "Cash In": "",
    "Invest Amt": "0.09",
    Amount: "-0.09",
    Account: "Joint Brokerage",
    "Statement Memo": "",
    Reference: "",
  },
  {
    Date: "4/29/2016",
    Type: "Dividend Income",
    Action: "",
    Security: "USAA Tax-Exempt Money Market Fund",
    Symbol: "USEXX",
    Payee: "USAA Tax-Exempt Money Market Fund",
    "Statement Payee": "",
    Category: "Investments:Dividend Income Tax-Free",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "",
    Shares: "",
    "Cash Out": "",
    "Cash In": "0.09",
    "Invest Amt": "",
    Amount: "0.09",
    Account: "Joint Brokerage",
    "Statement Memo": "",
    Reference: "",
  },
  {
    Date: "4/29/2016",
    Type: "Interest Income",
    Action: "",
    Security: "",
    Symbol: "",
    Payee: "",
    "Statement Payee": "",
    Category: "Investments:Interest Income",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "",
    Shares: "",
    "Cash Out": "",
    "Cash In": "0.87",
    "Invest Amt": "",
    Amount: "0.87",
    Account: "Tim's IRA",
    "Statement Memo": "FDIC INSURED ACCOUNT - IRA INTEREST RECEIVED",
    Reference: "",
  },
  {
    Date: "4/29/2016",
    Type: "Buy",
    Action: "",
    Security: "FDIC INSURED ACCOUNT - IRA",
    Symbol: "QRETQ",
    Payee: "FDIC INSURED ACCOUNT - IRA",
    "Statement Payee": "",
    Category: "Investments:Buy",
    "Comm/Fee": "",
    "Shares Out": "",
    "Shares In": "0.87",
    Shares: "0.87",
    "Cash Out": "0.87",
    "Cash In": "",
    "Invest Amt": "0.87",
    Amount: "-0.87",
    Account: "Tim's IRA",
    "Statement Memo": "",
    Reference: "",
  },
]

describe("QuickenInvestmentParser", () => {
  const qp = new QuickenInvestmentParser("export.csv")
  // beforeEach(() => jest.resetAllMocks())
  it("returns an instance of itself with sourceFile set", () => {
    expect(qp).toBeInstanceOf(QuickenInvestmentParser)
    expect(qp.sourceFile).toBe("export.csv")
  })

  test("parsedData returns an array of length 11", async () => {
    const mockVal = quickenInvestmentFileContentsFixture

    jest
      .spyOn(QuickenInvestmentParser.prototype, "csvFileContents")
      .mockResolvedValueOnce(<OkImpl<CSVData>>{
        ok: true,
        err: false,
        val: mockVal,
      })

    const result = await qp.parsedData()

    expect(result.val).toHaveLength(11)
  })
  test("parsedData returns an Error if there are no data from the file", async () => {
    jest
      .spyOn(QuickenInvestmentParser.prototype, "csvFileContents")
      .mockResolvedValue(<ErrImpl<Error>>{
        ok: false,
        err: true,
        val: new Error("No data in csv file."),
      })
    let message = ""

    const { err, val } = await qp.parsedData()

    if (err) message = val.message
    expect(val).toBeInstanceOf(Error)
    expect(message).toBe("No data in csv file.")
  })
})
